// Author
CREATE CONSTRAINT author_id IF NOT EXISTS ON (a:Author) ASSERT a.id IS UNIQUE;

// Paper
CREATE CONSTRAINT paper_id IF NOT EXISTS ON (p:Paper) ASSERT p.id IS UNIQUE;

// Journal
CREATE CONSTRAINT journal_name IF NOT EXISTS ON (j:Journal) ASSERT j.name IS UNIQUE;

// Topic
CREATE CONSTRAINT topic_id IF NOT EXISTS ON (t:Topic) ASSERT t.id IS UNIQUE;


//LOADING NODES

LOAD CSV WITH HEADERS FROM 'file:///clean_author.csv' AS row
MERGE (a:Author {id: row.`Author ID`})
SET a.name = row.`Author Name`,
    a.url = row.`Author URL`;

:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///clean_paper.csv' AS row
  WITH row
  MERGE (p:Paper {id: row.`Paper ID`})
  SET p.title = row.`Paper Title`,
      p.doi = row.`Paper DOI`,
      p.year = CASE WHEN row.`Paper Year` <> '' THEN toInteger(row.`Paper Year`) ELSE NULL END,
      p.citationCount = CASE WHEN row.`Paper Citation Count` <> '' THEN toInteger(row.`Paper Citation Count`) ELSE 0 END,
      p.journalDate = row.`Journal Date`
} IN TRANSACTIONS OF 10 ROWS;

LOAD CSV WITH HEADERS FROM 'file:///clean_journal.csv' AS row
MERGE (j:Journal {name: row.`Journal Name`})
SET j.publisher = row.`Journal Publisher`;


LOAD CSV WITH HEADERS FROM 'file:///clean_topic.csv' AS row
MERGE (t:Topic {id: toInteger(row.`Topic ID`)})
SET t.name = row.`Topic Name`,
    t.url = row.`Topic URL`;

//LOAD RELATIONSHIPS


LOAD CSV WITH HEADERS FROM 'file:///clean_author_paper.csv' AS row
MATCH (a:Author {id: row.`Author ID`})
MATCH (p:Paper {id: row.`Paper ID`})
MERGE (a)-[:WROTE]->(p);



LOAD CSV WITH HEADERS FROM 'file:///clean_paper_journal.csv' AS row
MATCH (p:Paper {id: row.`Paper ID`})
MATCH (j:Journal {name: row.`Journal Name`})
MERGE (p)-[:PUBLISHED_IN]->(j);



LOAD CSV WITH HEADERS FROM 'file:///clean_paper_reference.csv' AS row
MATCH (p1:Paper {id: row.`Paper ID`})
MATCH (p2:Paper {id: row.`Referenced Paper ID`})
MERGE (p1)-[:CITES]->(p2);



LOAD CSV WITH HEADERS FROM 'file:///clean_paper_topic.csv' AS row
MATCH (p:Paper {id: row.`Paper ID`})
MATCH (t:Topic {id: toInteger(row.`Topic ID`)})
MERGE (p)-[:HAS_TOPIC]->(t);

